on:
  pull_request

permissions:
  checks: write
  contents: read
  statuses: write

defaults:
  run:
    shell: bash

env:
  PIP_BREAK_SYSTEM_PACKAGES: "true"

jobs:
  test-on-operating-system:
   strategy:
     fail-fast: false
     matrix:
       os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
   runs-on: ${{ matrix.os }}
   steps:
     - uses: actions/checkout@v4
     - run: pip3 install 'poetry>=1.7.0'
     - run: poetry install --sync --no-root || poetry install --sync --no-root
     - run: poetry run poe check

  test-on-python-version:
   strategy:
     fail-fast: false
     matrix:
       version: ['3.8', '3.9', '3.10', '3.11', '3.12']
   runs-on: ubuntu-latest
   container:
     image: public.ecr.aws/docker/library/python:${{ matrix.version }}
   steps:
     - uses: actions/checkout@v4
     - run: pip3 install 'poetry>=1.7.0'
     - run: poetry install --sync --no-root
     - run: poetry run poe check

  publish-code-metrics:
    # See <https://docs.github.com/en/rest/commits/statuses?apiVersion=2022-11-28#create-a-commit-status> for the documentation of the API.
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
    steps:
      - name: Create statuses
        run: |
          gh api "repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" --method POST --silent -f "context=Code coverage" -f "state=pending" -f "description=checking..."
          gh api "repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" --method POST --silent -f "context=Unit tests" -f "state=pending" -f "description=checking..."
      - uses: actions/checkout@v4
      - run: pip3 install 'poetry>=1.7.0'
      - run: poetry install --sync --no-root
      - run: poetry run pytest
        continue-on-error: true
      - name: Publish code metrics to statuses
        if: ${{ always() }}
        run: |
          tpc="$(python -c 'import json;tpc=json.load(open(".coverage-report.json","r"))["totals"]["percent_covered"];print(f"{tpc:.2f}");')"
          gh api "repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" --method POST --silent -f "context=Code coverage" -f "state=success" -f "description=${tpc}%"

          all_tests="$(yq --input-format=xml '.testsuites.testsuite.+@tests' < .pytest-report.xml)"
          failed_tests="$(yq --input-format=xml '.testsuites.testsuite.+@failures' < .pytest-report.xml)"
          skipped_tests="$(yq --input-format=xml '.testsuites.testsuite.+@skipped' < .pytest-report.xml)"
          error_tests="$(yq --input-format=xml '.testsuites.testsuite.+@errors' < .pytest-report.xml)"
          passed_tests="$((all_tests - failed_tests - skipped_tests - error_tests))"
          gh api "repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" --method POST --silent -f "context=Unit tests" -f "state=success" -f "description=Passed: ${passed_tests}, failed: ${failed_tests}, skipped: ${skipped_tests}"
      - name: Set statuses to failure
        if: ${{ failure() || cancelled() }}
        run: |
          gh api "repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" --method POST --silent -f "context=Code coverage" -f "state=failure"
          gh api "repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" --method POST --silent -f "context=Unit tests" -f "state=failure"

  markdownlint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - run: npm install -g markdownlint-cli@0.37.0
      - run: markdownlint . --ignore LICENSE.md
